# This is the all in one solution for the travel management application
# It contains the reverse proxy, frontends, backends and one single database
version: '3'
services:
  travelmngt-db:
    image: postgres
    container_name: travelmngt-db
    environment:
      POSTGRES_USER: travelmanagement
      POSTGRES_PASSWORD: password
      POSTGRES_DB: travelmanagement
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U travelmanagement" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - travelmngt-db:/var/lib/postgresql/data
    restart: always
    networks:
      - dbnettravmgnt

  travelmngt-app:
    image: mig3177/travma-travelmanagement-backend:latest
    container_name: travelmngt-app
    restart: always
    depends_on:
      travelmngt-db:
        condition: service_healthy
    environment:
      DOMAIN: :8086
      API_URL: :8086
      JWT_SECRET: your-jwt-secret

      # Change to true when using tls
      PRODUCTION: false

      # Gives additional information of the webserver
      DEBUG: true

      GIN_MODE: release

      # BROKER Settings
      BROKERS: kafka:9092
      TOPIC: travelmanagement

      # DB Settings
      DB_HOST: travelmngt-db
      DB_USER: travelmanagement
      DB_PASSWORD: password
      DB_NAME: travelmanagement
      DB_PORT: 5432
      SSL_TLS: disable
      TIMEZONE: Europe/Berlin

    networks:
      - privatenet
      - dbnettravmgnt

  travelmngt-web:
    image: mig3177/travma-travelmanagement-frontend:latest
    container_name: travelmngt-web
    depends_on: 
      - travelmngt-app
    environment:
      API_URL_FR: "http://localhost:12345/travma/api/v1/"
      CHECKOUT_URL: ""
      LOGIN_URL: ""
      MONITOR_URL: ""
    networks:
      - privatenet
      - publicnet
    volumes:
      - "./travel-management/frontend/nginx.conf:/etc/nginx/nginx.conf"
  
  usermanagement-db:
    image: postgres
    container_name: usermanagement-db
    environment:
      POSTGRES_USER: usermanagement
      POSTGRES_PASSWORD: password
      POSTGRES_DB: usermanagement
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U usermanagement" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - usermanagement-db:/var/lib/postgresql/data
    restart: always
    networks:
      - dbnetusermanagement

  usermanagement-app:
    image: dak4408/travma-usermanagement-backend:latest
    container_name: usermanagement-backend
    restart: always
    depends_on:
      travelmngt-db:
        condition: service_healthy
    environment:
      DOMAIN: http://usermanagement-frontend:8081
      API_URL: :8082
      
      SALT: your-secret-salt
      JWT_SECRET: your-jwt-secret
      # Change to true when using tls
      PRODUCTION: false
      
      # Gives additional information of the webserver
      DEBUG: true
      # BROKERS should be just one value
      BROKERS: kafka:9092
      TOPIC: usermanagement
      # DB
      DB_HOST: usermanagement-db
      DB_USER: usermanagement
      DB_PASSWORD: password
      DB_NAME: usermanagement
      DB_PORT: 5432
      SSL_TLS: disable
      TIMEZONE: Europe/Berlin

    networks:
      - privatenet
      - dbnetusermanagement

    ports:
      - "8082:8082"

  usermanagement-web:
    image: dak4408/travma-usermanagement-frontend:latest
    container_name: usermanagement-web
    restart: always
    environment:
      API_URL: http://usermanagement-app:8082/api/v1
      CHECKOUT_URL: http://checkout-frontend:8083/#/cart
      TRAVELMANAGEMENT_URL: http://travelmngt-frontend:8085/#/travma
      MONITORING_URL: http://localhost:8087/*
    ports:
      - "8081:8081"
    networks:
      - privatenet
      - publicnet
    volumes:
      - "./usermanagement/frontend/nginx.conf:/etc/nginx/nignx.conf"

  proxy:
    image: nginx:stable-alpine3.17
    ports:
      - "12345:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
    depends_on:
      - travelmngt-web
    networks:
      - publicnet


  zookeeper:
    container_name: zookeeper
    restart: always
    image: docker.io/bitnami/zookeeper:3.8

    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      privatenet:

  kafka:
    container_name: kafka
    restart: always
    image: docker.io/bitnami/kafka:3.4

    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      privatenet:

  kafka-topics-generator:
    image: docker.io/bitnami/kafka:3.4
    depends_on:
      - kafka
    command: >
      bash -c
        "sleep 5s &&
        kafka-topics.sh --create --topic=checkout --if-not-exists --bootstrap-server=kafka:9092 &&
        kafka-topics.sh --create --topic=travelmanagement --if-not-exists --bootstrap-server=kafka:9092 &&
        kafka-topics.sh --create --topic=usermanagement --if-not-exists --bootstrap-server=kafka:9092"
    networks:
      privatenet:

  monitor-db:
    image: postgres
    container_name: monitor-db
    environment:
      POSTGRES_USER: monitor
      POSTGRES_PASSWORD: password
      POSTGRES_DB: monitor
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U monitor" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - monitor-db:/var/lib/postgresql/data
    restart: always
    networks:
      - dbnetmonitor

  monitor-app:
    image: mig3177/travma-monitoring-backend:latest
    container_name: monitor-app
    restart: always
    depends_on:
      monitor-db:
        condition: service_healthy
      kafka-topics-generator:
        condition: service_completed_successfully
    environment:
      DOMAIN: :8088
      API_URL: :8088
      JWT_SECRET: your-jwt-secret

      # Change to true when using tls
      PRODUCTION: false

      # Gives additional information of the webserver
      DEBUG: true

      # BROKER Settings
      BROKERS: kafka:9092

      # DB Settings
      DB_HOST: monitor-db
      DB_USER: monitor
      DB_PASSWORD: password
      DB_NAME: monitor
    ports:
      - "8087:8087"
    networks:
      - privatenet
      - dbnetmonitor

volumes:
  travelmngt-db:
  usermanagement-db:
  monitor-db:
  zookeeper-volume:
  kafka-volume:

networks:
  dbnetmonitor:
  dbnetusermanagement:
  dbnettravmgnt:
  privatenet:
  publicnet:
