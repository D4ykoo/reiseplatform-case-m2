version: "3.7"
services:
  zookeeper:
    container_name: zookeeper
    restart: always
    image: docker.io/bitnami/zookeeper:3.8

    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      travel-management_privatenet:

  kafka:
    container_name: kafka
    restart: always
    image: docker.io/bitnami/kafka:3.4

    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    ports:
      - 9094:9094
    networks:
      travel-management_privatenet:
      privatenet:

  kafka-topics-generator:
    image: docker.io/bitnami/kafka:3.4
    depends_on:
      - kafka
    command: >
      bash -c
        "sleep 5s &&
        kafka-topics.sh --create --topic=checkout --if-not-exists --bootstrap-server=kafka:9092 &&
        kafka-topics.sh --create --topic=travelmanagement --if-not-exists --bootstrap-server=kafka:9092 &&
        kafka-topics.sh --create --topic=usermanagement --if-not-exists --bootstrap-server=kafka:9092"
    networks:
      privatenet:

  monitor-db:
    image: postgres
    container_name: monitor-db
    environment:
      POSTGRES_USER: monitor
      POSTGRES_PASSWORD: password
      POSTGRES_DB: monitor
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U monitor" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - monitor-db:/var/lib/postgresql/data
    restart: always
    networks:
      - privatenet

  monitor-app:
    image: mig3177/travma-monitoring-backend:latest
    container_name: monitor-app
    restart: always
    depends_on:
      monitor-db:
        condition: service_healthy
      kafka-topics-generator:
        condition: service_completed_successfully
    environment:
      DOMAIN: :8088
      API_URL: :8088
      JWT_SECRET: your-jwt-secret

      # Change to true when using tls
      PRODUCTION: false

      # Gives additional information of the webserver
      DEBUG: true

      # BROKER Settings
      BROKERS: kafka:9092

      # DB Settings
      DB_HOST: monitor-db
      DB_USER: monitor
      DB_PASSWORD: password
      DB_NAME: monitor
    ports:
      - "8087:8087"
    networks:
      - privatenet

volumes:
  kafka-volume:
  zookeeper-volume:
  monitor-db:
networks:
  travel-management_privatenet:
    external: true
  privatenet:
  publicnet:
